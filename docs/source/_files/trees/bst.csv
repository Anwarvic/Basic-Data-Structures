Method,Description,Worst-case,Optimal
`is_empty() <bst.html#extra.trees.bst.BST.is_empty>`_,Checks if the BST is empty.,O(1),O(1)
`__len__() <bst.html#extra.trees.bst.BST.__len_\_>`_,Returns the number of nodes inside the BST.,O(1),O(1)
`__repr__() <bst.html#extra.trees.bst.BST.__repr_\_>`_,Represents the BST.,O(n),O(n)
`__iter__() <bst.html#extra.trees.bst.BST.__iter_\_>`_,Iterates over the BST.,O(n),O(n)
`__contains__() <bst.html#extra.trees.bst.BST.__contains_\_>`_,Checks the existence of the given item.,O(h),O(h)
`get_height() <bst.html#extra.trees.bst.BST.get_height>`_,Gets the BST's height.,O(n),O(1)
`get_depth() <bst.html#extra.trees.bst.BST.get_depth>`_,Gets the BST's depth.,O(n),O(1)
`get_nodes_per_level() <bst.html#extra.trees.bst.BST.get_nodes_per_level>`_,Returns a list of all nodes per level.,O(n),O(n)
`is_balanced() <bst.html#extra.trees.bst.BST.is_balanced>`_,Checks if the BST is balanced.,O(n),O(1)
`is_perfect() <bst.html#extra.trees.bst.BST.is_perfect>`_,Checks if the BST is perfect.,O(n),O(1)
`is_strict() <bst.html#extra.trees.bst.BST.is_strict>`_,Checks if the BST is strict.,O(n),O(1)
`count_leaf_nodes() <bst.html#extra.trees.bst.BST.count_leaf_nodes>`_,Counts all leaf nodes in the BST.,O(n),O(n)
`clear() <bst.html#extra.trees.bst.BST.clear>`_,Clears the whole BST instance.,O(1),O(1)
`to_list() <bst.html#extra.trees.bst.BST.to_list>`_,Converts the BST instance to a normal list.,O(n),O(n)
`traverse() <bst.html#extra.trees.bst.BST.traverse>`_,Traverses the BST based on given method.,O(n),O(n)
`preorder_traverse() <bst.html#extra.trees.bst.BST.preorder_traverse>`_,Traverses the BST in an pre-order manner.,O(n),O(n)
`inorder_traverse() <bst.html#extra.trees.bst.BST.inorder_traverse>`_,Traverses the BST in an in-order manner.,O(n),O(n)
`postorder_traverse() <bst.html#extra.trees.bst.BST.postorder_traverse>`_,Traverses the BST in an post-order manner.,O(n),O(n)
`breadth_first_traverse() <bst.html#extra.trees.bst.BST.breadth_first_traverse>`_,Traverses the BST level by level.,O(n),O(n)
`depth_first_traverse() <bst.html#extra.trees.bst.BST.depth_first_traverse>`_,Traverses the BST in an pre-order manner.,O(n),O(n)
`get_min() <bst.html#extra.trees.bst.BST.get_min>`_,Gets the minimum number in the BST.,O(h),O(h)
`get_max() <bst.html#extra.trees.bst.BST.get_max>`_,Gets the maximum number in the BST.,O(h),O(h)
`insert() <bst.html#extra.trees.bst.BST.insert>`_,Inserts a certain value to the BST.,O(h),O(h)
`remove() <bst.html#extra.trees.bst.BST.remove>`_,Removes a certain value from the BST.,O(h),O(h)
