Method,Description,Worst-case,Optimal
`is_empty() <binary_tree.html#extra.trees.binary_tree.BinaryTree.is_empty>`_,Checks if binary tree is empty.,O(1),O(1)
`__len__() <binary_tree.html#extra.trees.binary_tree.BinaryTree.__len_\_>`_,Returns the number of nodes of the binary tree.,O(n),O(1)
`__repr__() <binary_tree.html#extra.trees.binary_tree.BinaryTree.__repr_\_>`_,Represents the binary tree as a string.,O(n),O(n)
`__iter__() <binary_tree.html#extra.trees.binary_tree.BinaryTree.__iter_\_>`_,Iterates over the binary tree instance.,O(n),O(n)
`__contains__() <binary_tree.html#extra.trees.binary_tree.BinaryTree.__contains_\_>`_,Checks the existence of the given item.,O(n),O(n)
`get_height() <binary_tree.html#extra.trees.binary_tree.BinaryTree.get_height>`_,Gets the binary tree's height.,O(n),O(n)
`get_depth() <binary_tree.html#extra.trees.binary_tree.BinaryTree.get_depth>`_,Gets the binary tree's depth.,O(1),O(1)
`get_nodes_per_level() <binary_tree.html#extra.trees.binary_tree.BinaryTree.get_nodes_per_level>`_,Returns a list of all nodes per level.,O(n),O(n)
`is_balanced() <binary_tree.html#extra.trees.binary_tree.BinaryTree.is_balanced>`_,Checks if the binary tree is balanced.,O(n),O(n)
`is_perfect() <binary_tree.html#extra.trees.binary_tree.BinaryTree.is_perfect>`_,Checks if the binary tree is perfect.,O(n),O(n)
`is_strict() <binary_tree.html#extra.trees.binary_tree.BinaryTree.is_strict>`_,Checks if the binary tree is strict.,O(n),O(n)
`count_leaf_nodes() <binary_tree.html#extra.trees.binary_tree.BinaryTree.count_leaf_nodes>`_,Counts all leaf nodes in the binary tree.,O(n),O(n)
`clear() <binary_tree.html#extra.trees.binary_tree.BinaryTree.clear>`_,Clears the whole binary tree instance.,O(1),O(1)
`to_list() <binary_tree.html#extra.trees.binary_tree.BinaryTree.to_list>`_,Converts the bianry tree instance to a normal list.,O(n),O(n)
`traverse() <binary_tree.html#extra.trees.binary_tree.BinaryTree.traverse>`_,Traverses the binary tree based on given method.,O(n),O(n)
`preorder_traverse() <binary_tree.html#extra.trees.binary_tree.BinaryTree.preorder_traverse>`_,Traverses the binary tree in an pre-order manner.,O(n),O(n)
`inorder_traverse() <binary_tree.html#extra.trees.binary_tree.BinaryTree.inorder_traverse>`_,Traverses the binary tree in an in-order manner,O(n),O(n)
`postorder_traverse() <binary_tree.html#extra.trees.binary_tree.BinaryTree.postorder_traverse>`_,Traverses the binary tree in an post-order manner.,O(n),O(n)
`breadth_first_traverse() <binary_tree.html#extra.trees.binary_tree.BinaryTree.breadth_first_traverse>`_,Traverses the binary tree level by level.,O(n),O(n)
`depth_first_traverse() <binary_tree.html#extra.trees.binary_tree.BinaryTree.depth_first_traverse>`_,Traverses the binary tree in an pre-order manner.,O(n),O(n)
